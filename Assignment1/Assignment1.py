# -*- coding: utf-8 -*-
"""Untitled1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1SkD4a0fA4BfWntArc-stj1jpR_UpYWh1
"""

from scipy.stats import binom
from scipy.stats import bernoulli
import numpy as np

size=1000000

#Number of tosses
n=3
################### part(i) ##################

# p : Probability of getting head
p=1/2

# E : Probability of getting head on third toss = Probability of getting a head
E=p

# F : Probability of getting heads on first two tosses 
F=p*p 

# EF : Probability of getting head on third toss and getting heads on first two tosses = Probability of getting all heads
EF=p*p*p

#Simulation vs Theory
data_E = bernoulli.rvs(p = E,size = size)
data_F = bernoulli.rvs(p=F ,size = size)

#to find intersection of E and F and find probabilities of E and F
count_EF =0
count_E = 0
count_F = 0


for i in range(size):
  if (data_E[i] ==1 and data_F[i] )==1:
    count_EF+=1
  if data_F[i] == 1:
    count_F+=1


calc_prob_EF = count_EF/size
calc_prob_F = count_F/size

print(" In part(i) The calculated value of Pr(E|F) is " , calc_prob_EF/calc_prob_F , "while theoretical value is" , EF/F  )



################### part(ii) ##################

# p : Probability of getting head
p=1/2

# E : Probability of getting at least two heads
k=1
E = 1-binom.cdf(k, n, p)

# F : Probability of getting at most two heads
k=2
F= binom.cdf(k,n,p)
# EF : Probability of getting at least two head and getting at most two heads = Probability of getting exactly 2 heads
k=2
EF=binom.pmf(k, n, p)

#Simulation vs Theory
data_E = binom.rvs(n=3,p = E,size = size)
data_F = binom.rvs(n=3,p = F,size = size)

#to find intersection of E and F and find probabilities of E and F
count_EF =0
count_E = 0
count_F = 0

for i in range(size):
  if ( data_E[i] ==1 and data_F[i] )==1:
    count_EF+=1
  if data_F[i] == 1:
    count_F+=1


calc_prob_EF = count_EF/size
calc_prob_F = count_F/size

print(" In part(ii) The calculated value of Pr(E|F) is " , calc_prob_EF/calc_prob_F , "while theoretical value is" , EF/F  )


################### part(iii) ##################

# p : Probability of getting tail
p=1/2
# E : Probability of getting at most two tails
E=binom.cdf(2,n,p)

# F : Probability of getting at least one tail
F=1-binom.cdf(0,n,p)

# EF : Probability of getting at most two tails and getting at least one tail = Probability of getting either 1 or 2 tails
EF= binom.cdf(2,n,p)-binom.cdf(0,n,p)

#Simulation vs Theory
data_E = binom.rvs(n=3,p = E,size = size )
data_F = binom.rvs(n=3,p = F ,size = size)

#to find intersection of E and F and find probabilities of E and F
count_EF =0
count_E = 0
count_F = 0


for i in range(size):
  if (data_E[i] and data_F[i] ) == 1:
    count_EF+=1
  if data_F[i] == 1:
    count_F+=1


calc_prob_EF = count_EF/size
calc_prob_F = count_F/size

print(" In part(iii) The calculated value of Pr(E|F) is " , calc_prob_EF/calc_prob_F , "while theoretical value is" , EF/F  )